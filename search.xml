<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2019/10/13/MySQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/10/13/MySQL%E5%9F%BA%E7%A1%80%E8%AF%BE%E5%A0%82%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h1><h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><ol><li>数据库的英文单词： DataBase 简称 ： DB</li><li>什么数据库？<ul><li>用于存储和管理数据的仓库。<blockquote><p>转自黑马程序员</p></blockquote><a id="more"></a></li></ul></li><li>数据库的特点：<ul><li>持久化存储数据的。其实数据库就是一个文件系统</li><li>方便存储和管理数据</li><li>使用了统一的方式操作数据库 – SQL</li></ul></li></ol><ol start="4"><li>常见的数据库软件<ul><li>参见《MySQL基础.pdf》</li></ul></li></ol><h2 id="MySQL数据库软件"><a href="#MySQL数据库软件" class="headerlink" title="MySQL数据库软件"></a>MySQL数据库软件</h2><ol><li><p>安装</p><ul><li>参见《MySQL基础.pdf》</li></ul></li><li><p>卸载</p><ul><li>去mysql的安装目录找到my.ini文件<ul><li>复制 <code>datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&quot;</code></li></ul></li><li>卸载MySQL</li><li>删除<code>C:/ProgramData</code>目录下的MySQL文件夹。</li></ul></li><li><p>配置</p><ul><li><p>MySQL服务启动</p><ul><li>手动。</li><li><code>cmd--&gt; services.msc</code> 打开服务的窗口</li><li>使用管理员打开cmd<blockquote><p>net start mysql : 启动mysql的服务<br>net stop mysql:关闭mysql服务</p></blockquote></li></ul></li><li><p>MySQL登录</p><ul><li><code>mysql -uroot -p密码</code></li><li><code>mysql -hip -uroot -p连接目标的密码</code></li><li><code>mysql --host=ip --user=root --password=连接目标的密码</code></li></ul></li><li><p>MySQL退出</p><ul><li><code>exit</code></li><li><code>quit</code></li></ul></li><li><p>MySQL目录结构</p><ul><li>MySQL安装目录：<code>basedir=&quot;D:/develop/MySQL/&quot;</code><blockquote><p>配置文件 <code>my.ini</code></p></blockquote></li><li>MySQL数据目录：<code>datadir=&quot;C:/ProgramData/MySQL/MySQL Server 5.5/Data/&quot;</code><blockquote><p>几个概念</p><pre><code>*数据库：文件夹* 表：文件* 数据：数据</code></pre></blockquote></li></ul></li></ul></li></ol><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><ol><li><p>什么是SQL？<br> Structured Query Language：结构化查询语言<br> 其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。</p></li><li><p>SQL通用语法</p><ul><li>SQL 语句可以单行或多行书写，以分号结尾。</li><li>可使用空格和缩进来增强语句的可读性。</li><li>MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。</li><li>3 种注释<ul><li>单行注释: – 注释内容 或 # 注释内容(mysql 特有) </li><li>多行注释: /* 注释 */</li></ul></li></ul></li><li><p>SQL分类</p><blockquote><p>1) DDL(Data Definition Language)数据定义语言</p><pre><code>用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等</code></pre><p>2) DML(Data Manipulation Language)数据操作语言</p><pre><code>用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等</code></pre><p>3) DQL(Data Query Language)数据查询语言</p><pre><code>用来查询数据库中表的记录(数据)。关键字：select, where 等</code></pre><p>4) DCL(Data Control Language)数据控制语言(了解)</p><pre><code>用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等</code></pre></blockquote></li></ol><h3 id="DDL-操作数据库、表"><a href="#DDL-操作数据库、表" class="headerlink" title="DDL:操作数据库、表"></a>DDL:操作数据库、表</h3><ol><li><p>操作数据库：CRUD</p><ul><li><p>C(Create):创建</p><ul><li><p>创建数据库：</p><blockquote><p>create database 数据库名称;</p></blockquote></li><li><p>创建数据库，判断不存在，再创建：</p><blockquote><p>create database if not exists 数据库名称;</p></blockquote></li><li><p>创建数据库，并指定字符集</p><blockquote><p>create database 数据库名称 character set 字符集名;</p></blockquote></li><li><p>练习： 创建db4数据库，判断是否存在，并制定字符集为gbk</p><blockquote><p>create database if not exists db4 character set gbk;</p></blockquote></li></ul></li><li><p>R(Retrieve)：查询</p><ul><li>查询所有数据库的名称:<blockquote><p>show databases;</p></blockquote></li><li>查询某个数据库的字符集:查询某个数据库的创建语句<blockquote><p>show create database 数据库名称;</p></blockquote></li></ul></li><li><p>U(Update):修改</p><ul><li>修改数据库的字符集<blockquote><p>alter database 数据库名称 character set 字符集名称;</p></blockquote></li></ul></li><li><p>D(Delete):删除</p><ul><li>删除数据库<blockquote><p>drop database 数据库名称;</p></blockquote></li><li>判断数据库存在，存在再删除<blockquote><p>drop database if exists 数据库名称;</p></blockquote></li></ul></li><li><p>使用数据库</p><ul><li>查询当前正在使用的数据库名称<blockquote><p>select database();</p></blockquote></li><li>使用数据库<blockquote><p>use 数据库名称;</p></blockquote></li></ul></li></ul></li></ol><ol start="2"><li><p>操作表</p><ul><li><p>C(Create):创建</p><ul><li><p>语法：</p><blockquote><p>create table 表名(</p><pre><code>列名1 数据类型1,列名2 数据类型2,....列名n 数据类型n</code></pre><p>);</p></blockquote></li><li><p>注意：最后一列，不需要加逗号（,）</p></li><li><p>数据库类型：</p><ol><li><p>int：整数类型</p><blockquote><p>age int,</p></blockquote></li><li><p>double:小数类型</p><blockquote><p>score double(5,2)</p></blockquote></li><li><p>date:日期，只包含年月日，yyyy-MM-dd</p></li><li><p>datetime:日期，包含年月日时分秒     yyyy-MM-dd HH:mm:ss</p></li><li><p>timestamp:时间错类型    包含年月日时分秒     yyyy-MM-dd HH:mm:ss    </p><blockquote><p>如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值</p></blockquote></li><li><p>varchar：字符串</p><blockquote><p>name varchar(20):姓名最大20个字符<br>zhangsan 8个字符  张三 2个字符</p></blockquote></li></ol></li></ul></li></ul></li></ol><ol start="3"><li>创建表<blockquote><p>create table student(</p><pre><code>id int,name varchar(32),age int ,score double(4,1),birthday date,insert_time timestamp</code></pre><p>);</p><ul><li>复制表：<br>create table 表名 like 被复制的表名;          </li></ul></blockquote></li></ol><ul><li><p>R(Retrieve)：查询</p><ul><li>查询某个数据库中所有的表名称<blockquote><p>show tables;</p></blockquote></li><li>查询表结构<blockquote><p>desc 表名;</p></blockquote></li></ul></li><li><p>U(Update):修改</p><ol><li>修改表名<blockquote><p>alter table 表名 rename to 新的表名;</p></blockquote></li><li>修改表的字符集<blockquote><p>alter table 表名 character set 字符集名称;</p></blockquote></li><li>添加一列<blockquote><p>alter table 表名 add 列名 数据类型;</p></blockquote></li><li>修改列名称 类型<blockquote><p>alter table 表名 change 列名 新列别 新数据类型;<br>alter table 表名 modify 列名 新数据类型;</p></blockquote></li><li>删除列<blockquote><p>alter table 表名 drop 列名;</p></blockquote></li></ol></li><li><p>D(Delete):删除</p><ol><li>drop table 表名;</li><li>drop table  if exists 表名 ;</li></ol></li><li><p>客户端图形化工具：SQLYog</p></li></ul><h3 id="DML：增删改表中数据"><a href="#DML：增删改表中数据" class="headerlink" title="DML：增删改表中数据"></a>DML：增删改表中数据</h3><ol><li><p>添加数据：</p><ul><li>语法：<blockquote><p>insert into 表名(列名1,列名2,…列名n) values(值1,值2,…值n);</p></blockquote></li><li>注意：<blockquote><p>列名和值要一一对应。<br>如果表名后，不定义列名，则默认给所有列添加值</p><pre><code>insert into 表名 values(值1,值2,...值n);</code></pre><p>除了数字类型，其他类型需要使用引号(单双都可以)引起来</p></blockquote></li></ul></li><li><p>删除数据：</p><ul><li>语法：<blockquote><p>delete from 表名 [where 条件]</p></blockquote></li><li>注意：<blockquote><p>如果不加条件，则删除表中所有记录。<br>如果要删除所有记录</p><pre><code>1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。</code></pre></blockquote></li></ul></li><li><p>修改数据：</p><ul><li><p>语法：</p><blockquote><p>update 表名 set 列名1 = 值1, 列名2 = 值2,… [where 条件];</p></blockquote></li><li><p>注意：</p><blockquote><p>如果不加任何条件，则会将表中所有记录全部修改。</p></blockquote></li></ul></li></ol><h3 id="DQL：查询表中的记录"><a href="#DQL：查询表中的记录" class="headerlink" title="DQL：查询表中的记录"></a>DQL：查询表中的记录</h3><ul><li>select * from 表名;</li></ul><ol><li>语法：<br> select<pre><code>字段列表</code></pre> from<pre><code>表名列表</code></pre> where<pre><code>条件列表</code></pre> group by<pre><code>分组字段</code></pre> having<pre><code>分组之后的条件</code></pre> order by<pre><code>排序</code></pre> limit<pre><code>分页限定</code></pre></li></ol><ol start="2"><li>基础查询<ol><li>多个字段的查询<br> select 字段名1，字段名2… from 表名；<blockquote><p>注意： 如果查询所有字段，则可以使用*来替代字段列表。</p></blockquote></li><li>去除重复：<blockquote><p>distinct</p></blockquote></li><li>计算列<blockquote><p>一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）<br>ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null</p><pre><code>* 表达式1：哪个字段需要判断是否为null* 如果该字段为null后的替换值。</code></pre></blockquote></li><li>起别名：<blockquote><p>as：as也可以省略</p></blockquote></li></ol></li></ol><ol start="3"><li><p>条件查询</p><ol><li><p>where子句后跟条件</p></li><li><p>运算符</p><ul><li><blockquote><p>、&lt; 、&lt;= 、&gt;= 、= 、&lt;&gt;</p></blockquote></li><li><p>BETWEEN…AND  </p></li><li><p>IN( 集合) </p></li><li><p>LIKE：模糊查询</p><ul><li>占位符：<ul><li>_:单个任意字符</li><li>%：多个任意字符</li></ul></li></ul></li><li><p>IS NULL  </p></li><li><p>and  或 &amp;&amp;</p></li><li><p>or  或 || </p></li><li><p>not  或 !</p><p>  – 查询年龄大于20岁</p><p>  SELECT * FROM student WHERE age &gt; 20;</p><p>  SELECT * FROM student WHERE age &gt;= 20;</p><p>  – 查询年龄等于20岁<br>  SELECT * FROM student WHERE age = 20;</p><p>  – 查询年龄不等于20岁<br>  SELECT * FROM student WHERE age != 20;<br>  SELECT * FROM student WHERE age &lt;&gt; 20;</p><p>  – 查询年龄大于等于20 小于等于30</p><p>  SELECT * FROM student WHERE age &gt;= 20 &amp;&amp;  age &lt;=30;<br>  SELECT * FROM student WHERE age &gt;= 20 AND  age &lt;=30;<br>  SELECT * FROM student WHERE age BETWEEN 20 AND 30;</p><p>  – 查询年龄22岁，18岁，25岁的信息<br>  SELECT * FROM student WHERE age = 22 OR age = 18 OR age = 25<br>  SELECT * FROM student WHERE age IN (22,18,25);</p><p>  – 查询英语成绩为null<br>  SELECT * FROM student WHERE english = NULL; – 不对的。null值不能使用 = （!=） 判断</p><p>  SELECT * FROM student WHERE english IS NULL;</p><p>  – 查询英语成绩不为null<br>  SELECT * FROM student WHERE english  IS NOT NULL;</p></li></ul></li></ol></li></ol><pre><code>-- 查询姓马的有哪些？ likeSELECT * FROM student WHERE NAME LIKE &apos;马%&apos;;-- 查询姓名第二个字是化的人SELECT * FROM student WHERE NAME LIKE &quot;_化%&quot;;-- 查询姓名是3个字的人SELECT * FROM student WHERE NAME LIKE &apos;___&apos;;-- 查询姓名中包含德的人SELECT * FROM student WHERE NAME LIKE &apos;%德%&apos;;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>反射</title>
      <link href="/2019/10/06/%E5%8F%8D%E5%B0%84/"/>
      <url>/2019/10/06/%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="反射：框架设计的灵魂"><a href="#反射：框架设计的灵魂" class="headerlink" title="反射：框架设计的灵魂"></a>反射：框架设计的灵魂</h1><p>框架：半成品软件。可以在框架的基础上进行软件开发，简化编码<br>反射：将类的各个组成部分封装为其他对象，这就是反射机制</p><a id="more"></a><h2 id="好处："><a href="#好处：" class="headerlink" title="好处："></a>好处：</h2><ol><li>可以在程序运行过程中，操作这些对象。</li><li>可以解耦，提高程序的可扩展性。</li></ol><h2 id="获取Class对象的方式："><a href="#获取Class对象的方式：" class="headerlink" title="获取Class对象的方式："></a>获取Class对象的方式：</h2><ol><li>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象<blockquote><p>多用于配置文件，将类名定义在配置文件中。读取文件，加载类</p></blockquote></li><li>类名.class：通过类名的属性class获取<blockquote><p>多用于参数的传递</p></blockquote></li><li>对象.getClass()：getClass()方法在Object类中定义着。<blockquote><p>多用于对象的获取字节码的方式</p></blockquote></li></ol><h2 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h2><p>同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。</p><h2 id="Class对象功能："><a href="#Class对象功能：" class="headerlink" title="Class对象功能："></a>Class对象功能：</h2><ul><li>获取功能：</li></ul><ol><li><p>获取成员变量们</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Field[] getFields() ：获取所有<span class="keyword">public</span>修饰的成员变量</span><br><span class="line"><span class="function">Field <span class="title">getField</span><span class="params">(String name)</span>   获取指定名称的 <span class="keyword">public</span>修饰的成员变量</span></span><br><span class="line"><span class="function">Field[] <span class="title">getDeclaredFields</span><span class="params">()</span>  获取所有的成员变量，不考虑修饰符</span></span><br><span class="line"><span class="function">Field <span class="title">getDeclaredField</span><span class="params">(String name)</span></span></span><br></pre></td></tr></table></figure></li><li><p>获取构造方法们</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] getConstructors()  </span><br><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getConstructor</span><span class="params">(类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">getDeclaredConstructor</span><span class="params">(类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function">Constructor&lt;?&gt;[] <span class="title">getDeclaredConstructors</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li><li><p>获取成员方法们：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Method[] getMethods()  </span><br><span class="line"><span class="function">Method <span class="title">getMethod</span><span class="params">(String name, 类&lt;?&gt;... parameterTypes)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">Method[] <span class="title">getDeclaredMethods</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function">Method <span class="title">getDeclaredMethod</span><span class="params">(String name, 类&lt;?&gt;... parameterTypes)</span></span></span><br></pre></td></tr></table></figure></li><li><p>获取全类名    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">String <span class="title">getName</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Field：成员变量"><a href="#Field：成员变量" class="headerlink" title="Field：成员变量"></a>Field：成员变量</h2><p>操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 设置值</span><br><span class="line">* <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(Object obj, Object value)</span>  </span></span><br><span class="line"><span class="function">2. 获取值</span></span><br><span class="line"><span class="function">* <span class="title">get</span><span class="params">(Object obj)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">3. 忽略访问权限修饰符的安全检查</span></span><br><span class="line"><span class="function">* <span class="title">setAccessible</span><span class="params">(<span class="keyword">true</span>)</span>:暴力反射</span></span><br></pre></td></tr></table></figure><h2 id="Constructor-构造方法"><a href="#Constructor-构造方法" class="headerlink" title="Constructor:构造方法"></a>Constructor:构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 创建对象：</span><br><span class="line">* <span class="function">T <span class="title">newInstance</span><span class="params">(Object... initargs)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法</span></span><br></pre></td></tr></table></figure><h2 id="Method：方法对象"><a href="#Method：方法对象" class="headerlink" title="Method：方法对象"></a>Method：方法对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* 执行方法：</span><br><span class="line">* <span class="function">Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span>  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">* 获取方法名称：</span></span><br><span class="line"><span class="function">* String getName:获取方法名</span></span><br></pre></td></tr></table></figure><ul><li>案例：<ul><li>需求：写一个”框架”，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法<ul><li>实现：<ol><li>配置文件</li><li>反射</li></ol></li><li>步骤：<ol><li>将需要创建的对象的全类名和需要执行的方法定义在配置文件中</li><li>在程序中加载读取配置文件</li><li>使用反射技术来加载类文件进内存</li><li>创建对象</li><li>执行方法</li></ol></li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Object:所有的类的超类</title>
      <link href="/2019/10/06/Object-%E6%89%80%E6%9C%89%E7%9A%84%E7%B1%BB%E7%9A%84%E8%B6%85%E7%B1%BB/"/>
      <url>/2019/10/06/Object-%E6%89%80%E6%9C%89%E7%9A%84%E7%B1%BB%E7%9A%84%E8%B6%85%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自黑马程序员</p></blockquote><a id="more"></a><h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p><code>java.lang.Object</code>类是Java语言中的根类，即所有类的父类。它中描述的所有方法子类都可以使用。在对象实例化的时候，最终找的父类就是Object。</p><p>如果一个类没有特别指定父类，    那么默认则继承自Object类。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。今天我们主要学习其中的2个：</p><ul><li><code>public String toString()</code>：返回该对象的字符串表示。</li><li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li></ul><h2 id="1-2-toString方法"><a href="#1-2-toString方法" class="headerlink" title="1.2 toString方法"></a>1.2 toString方法</h2><h3 id="方法摘要"><a href="#方法摘要" class="headerlink" title="方法摘要"></a>方法摘要</h3><ul><li><code>public String toString()</code>：返回该对象的字符串表示。</li></ul><p>toString方法返回该对象的字符串表示，其实该字符串内容就是对象的类型+@+内存地址值。</p><p>由于toString方法返回的结果是内存地址，而在开发中，经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。</p><h3 id="覆盖重写"><a href="#覆盖重写" class="headerlink" title="覆盖重写"></a>覆盖重写</h3><p>如果不希望使用toString方法的默认行为，则可以对它进行覆盖重写。例如自定义的Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span> + <span class="string">", age="</span> + age + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略构造器与Getter Setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IntelliJ IDEA中，可以点击<code>Code</code>菜单中的<code>Generate...</code>，也可以使用快捷键<code>alt+insert</code>，点击<code>toString()</code>选项。选择需要包含的成员变量并确定。</p><blockquote><p>小贴士： 在我们直接使用输出语句输出对象名的时候,其实通过该对象调用了其toString()方法。</p></blockquote><h2 id="1-3-equals方法"><a href="#1-3-equals方法" class="headerlink" title="1.3 equals方法"></a>1.3 equals方法</h2><h3 id="方法摘要-1"><a href="#方法摘要-1" class="headerlink" title="方法摘要"></a>方法摘要</h3><ul><li><code>public boolean equals(Object obj)</code>：指示其他某个对象是否与此对象“相等”。</li></ul><p>调用成员方法equals并指定参数为另一个对象，则可以判断这两个对象是否是相同的。这里的“相同”有默认和自定义两种方式。</p><h3 id="默认地址比较"><a href="#默认地址比较" class="headerlink" title="默认地址比较"></a>默认地址比较</h3><p>如果没有覆盖重写equals方法，那么Object类中默认进行<code>==</code>运算符的对象地址比较，只要不是同一个对象，结果必然为false。</p><h3 id="对象内容比较"><a href="#对象内容比较" class="headerlink" title="对象内容比较"></a>对象内容比较</h3><p>如果希望进行对象的内容比较，即所有或指定的部分成员变量相同就判定两个对象相同，则可以覆盖重写equals方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果对象地址一样，则认为相同</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 如果参数为空，或者类型信息不一样，则认为不同</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass())</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// 转换为当前类型</span></span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="comment">// 要求基本类型相等，并且将引用类型交给java.util.Objects类的equals静态方法取用结果</span></span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp; Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码充分考虑了对象为空、类型一致等问题，但方法内容并不唯一。大多数IDE都可以自动生成equals方法的代码内容。在IntelliJ IDEA中，可以使用<code>Code</code>菜单中的<code>Generate…</code>选项，也可以使用快捷键<code>alt+insert</code>，并选择<code>equals() and hashCode()</code>进行自动代码生成</p><blockquote><p>tips：Object类当中的hashCode等其他方法，今后学习。</p></blockquote><h2 id="1-4-Objects类"><a href="#1-4-Objects类" class="headerlink" title="1.4 Objects类"></a>1.4 Objects类</h2><p>在刚才IDEA自动重写equals代码中，使用到了<code>java.util.Objects</code>类，那么这个类是什么呢？</p><p>在<strong>JDK7</strong>添加了一个Objects工具类，它提供了一些方法来操作对象，它由一些静态的实用方法组成，这些方法是null-save（空指针安全的）或null-tolerant（容忍空指针的），用于计算对象的hashcode、返回对象的字符串表示形式、比较两个对象。</p><p>在比较两个对象的时候，Object的equals方法容易抛出空指针异常，而Objects类中的equals方法就优化了这个问题。方法如下：</p><ul><li><code>public static boolean equals(Object a, Object b)</code>:判断两个对象是否相等。</li></ul><p>我们可以查看一下源码，学习一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>继承和多态</title>
      <link href="/2019/10/06/%E7%BB%A7%E6%89%BF/"/>
      <url>/2019/10/06/%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="1-子类构造器"><a href="#1-子类构造器" class="headerlink" title="1.子类构造器"></a>1.子类构造器</h1><p>父类：Employee</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name,<span class="keyword">double</span> salary)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>子类：Manager</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Manager</span><span class="params">(String name,<span class="keyword">double</span> salary,<span class="keyword">double</span> bonus)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(name,salary);</span><br><span class="line">    <span class="keyword">this</span>.bonus = bonus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：由于Employee类的域是私有的，Manager的构造器不能访问Employee的私有域。可以通过super实现对父类构造器的调用。</p><blockquote><p>注:<br>(1).使用super调用构造器的语句必须是子类构造器的第一条语句。<br>(2).如果子类没有显式的调用父类的构造器，将自动调用父类默认的构造器(没有参数).<br>(3).如果父类中没有不带参数的构造器，子类的构造器中又没有显式的调用父类的其他构造器，则编译器会报错。</p></blockquote><h1 id="2-多态"><a href="#2-多态" class="headerlink" title="2.多态"></a>2.多态</h1><p>三个要素：<br>(1).要有继承<br>(2).方法的重写<br>(3).父类引用指向子类对象(子类引用指向父类会报错)</p><h1 id="3-阻止继承-final类和方法"><a href="#3-阻止继承-final类和方法" class="headerlink" title="3.阻止继承:final类和方法"></a>3.阻止继承:final类和方法</h1><p>(1).类:被final修饰的类不能被继承<br>(2).方法:被final修饰的方法不能被重写<br>(3).域:被final修饰的域不能被修改</p><blockquote><p>注:final类中所有的方法自动地成为final方法，不包括域。</p></blockquote><h1 id="4-抽象类"><a href="#4-抽象类" class="headerlink" title="4.抽象类"></a>4.抽象类</h1><h3 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h3><p>父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有 意义，而方法主体则没有存在的意义了。我们把没有方法主体的方法称为抽象方法。Java语法规定，包含抽象方法 的类就是抽象类。 </p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>抽象方法 ： 没有方法体的方法。 抽象类：包含抽象方法的类。 </p><h2 id="4-1abstract使用格式"><a href="#4-1abstract使用格式" class="headerlink" title="4.1abstract使用格式"></a>4.1abstract使用格式</h2><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>使用 <code>abstract</code> 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。<br>定义格式：<br><code>修饰符 abstract 返回值类型 方法名 (参数列表);</code></p><p>代码举例：<br><code>public abstract void run();</code></p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>如果一个类包含抽象方法，那么该类必须是抽象类。<br>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">abstract class 类名字 &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Animal &#123;</span><br><span class="line">    public abstract void run(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象的使用"><a href="#抽象的使用" class="headerlink" title="抽象的使用"></a>抽象的使用</h3><p>继承抽象类的子类必须重写父类所有的抽象方法。否则，该子类也必须声明为抽象类。最终，必须有子类实现该父 类的抽象方法，否则，从最初的父类到最终的子类都不能创建对象，失去意义。<br>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span></span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"小猫在墙头走~~~"</span>)；               </span><br><span class="line">    &#125; </span><br><span class="line">&#125;   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CatTest</span> </span>&#123;    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;             </span><br><span class="line">            <span class="comment">// 创建子类对象         </span></span><br><span class="line">            Cat c = <span class="keyword">new</span> Cat();                  </span><br><span class="line">            <span class="comment">// 调用run方法         </span></span><br><span class="line">            c.run();    </span><br><span class="line">        &#125;    </span><br><span class="line">&#125; </span><br><span class="line">输出结果： </span><br><span class="line">小猫在墙头走~~~</span><br></pre></td></tr></table></figure><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做实现方法。</p><h2 id="4-2注意事项"><a href="#4-2注意事项" class="headerlink" title="4.2注意事项"></a>4.2注意事项</h2><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ul><li><ol><li>抽象类不能创建对象，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。<blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li></ol></li><li><ol start="2"><li>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。<blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。 </p></blockquote></li></ol></li><li><ol start="3"><li>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。<blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设 计。</p></blockquote></li></ol></li><li><ol start="4"><li>抽象类的子类，必须重写抽象父类中所有的抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。<blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有 意义。 </p></blockquote></li></ol></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库的CRUD操作</title>
      <link href="/2019/09/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84CRUD%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/09/17/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84CRUD%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="操作数据库，表"><a href="#操作数据库，表" class="headerlink" title="操作数据库，表"></a>操作数据库，表</h1><a id="more"></a><h2 id="1-操作数据库-CRUD"><a href="#1-操作数据库-CRUD" class="headerlink" title="1.操作数据库 : CRUD"></a>1.操作数据库 : CRUD</h2><pre><code>(1).C(Create):创建    * 创建数据库:        * create database 数据库名称;    * 创建数据库，判断不存在，再创建:        * create database if not exists 数据库名称;    * 创建数据库，并指定字符集        * create database 数据库名称 character set 字符集名;    * 创建db4数据库，判断是否存在，并制定字符集为gbk        * create database if not exists db4 character set gbk;(2).R(Retrieve):查询    * 查询所有数据库的名称:        * show databases;    * 查看某个数据库的字符集        * show create database 数据库名称;(3).U(Update):修改    * 修改数据库的字符集        * alter database 数据库名称 character set 字符集名称;(4).D(Delete):删除    * 删除数据库        * drop database 数据库名称;    * 判断数据库存在，再删除        * drop database if exists 数据库名称;(5).使用数据库    * 查询当前正在使用的数据库名称        * select database();    * 使用数据库        * use 数据库名称</code></pre><h2 id="2-操作表-CRUD"><a href="#2-操作表-CRUD" class="headerlink" title="2.操作表:CRUD"></a>2.操作表:CRUD</h2><pre><code>(1).C(Create):创建    1.语法：        create table 表名(            列名1 数据类型1,            列名2 数据类型2,            ...            列名n 数据类型n        );        * 注意:最后一列，不需要加逗号(,)        *数据库类型:            1. int:整数类型                * age int,            2. double:小数类型                * score double(5,2),            3. date:日期，只包含年月日，yyyy-MM-dd            4. datetime:日期，包含年月日时分秒 yyyy-MM-dd HH:mm:ss            5. timestamp:时间戳类型 包含年月日时分秒 yyyy-MM-dd HH:mm:ss                * 如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值            6. varchar:字符串                * name varchar(20):姓名最大20个字符                * zhangsan 8个字符 张三 2个字符     * 创建表        create table student(            id int,            name varchar(32),            age int,            score double(4,1),            birthday date,            insert_time timestamp        );    * 复制表：        * create table 表名 like 被复制的表名;(2).R(Retrieve):查询    * 查询某个数据库中所有的表名称        * show tables;    * 查询表结构        * desc 表名;(3).U(Update):修改    1. 修改表名        alter table 表名 rename to 新的表名;    2. 修改表的字符集        alter table 表名 character set 字符集名称;    3. 添加一列        alter table 表名 add 列名 数据类型;    4. 添加列名称 类型        alter table 表名 change 列名 新列名 新数据类型;        alter table 表名 modify 列名 新数据类型;    5. 删除列        alter table 表名 drop 列名;(4).D(Delete):删除    * drop table 表名;    * drop table if exists 表名;</code></pre><h1 id="操作表中数据"><a href="#操作表中数据" class="headerlink" title="操作表中数据"></a>操作表中数据</h1><h2 id="DML-增删改表中数据"><a href="#DML-增删改表中数据" class="headerlink" title="DML:增删改表中数据"></a>DML:增删改表中数据</h2><pre><code>1. 添加数据    * 语法:        * insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);    * 注意        1. 列名和值要一一对应        2. 如果表名后,不定义列名,则默认给所有列添加值            insert into 表名 values(值1,值2,...值n);        3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来2. 删除数据:    * 语法:        * delete from 表名 where 条件    * 注意:        1. 如果不加条件，则删除表中所有记录。        2. 如果要删除所有记录            1. delete from 表名; --不推荐使用，有多少条记录就会执行多少次删除操作。            2. truncate table 表名; -- 推荐使用，效率更高，先删除表，再创建一张一样的表。3. 修改数据     * 语法:        * update 表名 set 列名1 = 值1,列名2 = 值2,... where 条件    * 注意:        1.如果不加任何条件,则会将表中所有记录全部修改</code></pre><h2 id="DQL-查询表中的记录"><a href="#DQL-查询表中的记录" class="headerlink" title="DQL:查询表中的记录"></a>DQL:查询表中的记录</h2><pre><code>* select * from 表名;1. 语法：    select         字段列表    from        表名列表    where        条件列表    group by         分组字段    having        分组之后的条件    order by        排序    limit        分页限定2. 基础查询    1. 多个字段的查询        select 字段名1,字段名2...from 表名;        例:SELECT NAME,age FROM student;        * 注意:            * 如果查询所有字段,走位可以使用*来代替字段列表。    2. 去除重复:        * distinct    3. 计算列        * 一般可以使用四则运算计算一些列的值。(一般只会进行数值型的计算)        * ifnull(表达式1，表达式2):null参与的运算，计算都为Null            * 表达式1:哪个字段需要判断是否为null            * 表达式2:该字段为null后的替换值。    4.起别名:        * as: as也可以省略。3. 条件查询    1. where子句后跟条件    2. 运算符        * &gt; , &lt; , &gt;= , &lt;= , &lt;&gt;        * between...and        * in(集合)        * like            * 占位符:                * _:单个任意字符                * %:多个任意字符</code></pre><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/mysql/3.png" alt></p><pre><code>* is null* and 或 &amp;&amp;* or 或 ||* not 或 !</code></pre><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/mysql/1.png" alt><br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/mysql/2.png" alt></p><pre><code>4. 排序查询    * 语法: order by 子句        * order by 排序字段,排序字段2 排序方式    * 排序方式:        * ASC :升序，默认的。        * DESC:降序    * 注意:        * 如果有多个排序条件，则当前边的条件一样时，才会判断第二条件</code></pre><p>例子：<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/mysql/4.png" alt></p><pre><code>5. 聚合函数    1. count:计算个数        1. 一半选择非空的列:主键        2. count(*)    2. max:计算最大值    3. min:计算最小值    4. sum:计算和    5. avg:计算平均值    * 注意：聚合函数计算，排除null值        解决方案：            1. 选择不包含非空的列进行计算            2. IFNULL函数</code></pre><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/mysql/5.png" alt></p><pre><code>6. 分组查询    1. 语法 : group by 分组字段    2. 注意:        1. 分组之后查询的字段：分组字段，聚合函数        2. where 和 having 的区别?            1. where 在分组之前进行限定，如果不满足条件，不参与分组。having在分组之后限定，如果不满足结果，则不会被查询出来            2. where 后不可以跟聚合函数,having可以进行聚合函数的判断.</code></pre><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/mysql/6.png" alt></p><pre><code>7. 分页查询    1. 语法:limit 开始的索引，每页查询的条数    2. 公式:开始的索引 = (当前的页码 - 1) * 每页显示的条数    3. limit是一个MySql&quot;方言&quot;</code></pre><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/mysql/7.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>core java第四章</title>
      <link href="/2019/09/11/core-java%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
      <url>/2019/09/11/core-java%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="一-用户自定义类"><a href="#一-用户自定义类" class="headerlink" title="一.用户自定义类"></a>一.用户自定义类</h2><a id="more"></a><p>这个实例程序包含两个类：Employee类和带有public访问修饰符的EmployeeTest类。源文件名是EmplyeeTest.java,这是因为文件名必须与public类的名字相匹配。在一个源文件中，只能有一个公有类，但可以有任意数目的非共有类。<br><strong>代码如下</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Employee[] staff = <span class="keyword">new</span> Employee[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">3</span>;i++) &#123;</span><br><span class="line">staff[i] = <span class="keyword">new</span> Employee(<span class="string">"a"</span> + i, <span class="number">4000</span>, <span class="number">1999</span>, <span class="number">9</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(Employee e : staff) &#123;</span><br><span class="line">e.raiseSalary(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> salary;</span><br><span class="line"><span class="keyword">private</span> LocalDate hireDay;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, <span class="keyword">double</span> salary, <span class="keyword">int</span> year,<span class="keyword">int</span> month,<span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.salary = salary;</span><br><span class="line"><span class="keyword">this</span>.hireDay = LocalDate.of(year, month, day);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">raiseSalary</span><span class="params">(<span class="keyword">double</span> byPercent)</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> raise = salary * byPercent / <span class="number">100</span>;</span><br><span class="line">salary += raise;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-访问权限"><a href="#二-访问权限" class="headerlink" title="二.访问权限"></a>二.访问权限</h2><h3 id="1-final关键字"><a href="#1-final关键字" class="headerlink" title="(1) final关键字"></a>(1) final关键字</h3><p>1.final 修饰的基本类型值不能被修改<br>2.final 修饰的引用类型的对象引用不能被修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> String a = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String b = <span class="string">"def"</span>;</span><br><span class="line"><span class="comment">//a = b;error:cannot be assigned</span></span><br><span class="line">b = a;<span class="comment">//b对象指向a却可以</span></span><br><span class="line">System.out.println(b);<span class="comment">//输出是abc</span></span><br></pre></td></tr></table></figure><h3 id="2-static关键字"><a href="#2-static关键字" class="headerlink" title="(2) static关键字"></a>(2) static关键字</h3><h4 id="static常变量"><a href="#static常变量" class="headerlink" title="static常变量"></a>static常变量</h4><p>static是相当于共享的概念</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> nextId = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br></pre></td></tr></table></figure><p>这个类的所有实例将共享一个nextId域。如果有1000个Employee类的对象，则有1000个实例域id.但是，只有一个静态域nextId.即使没有一个Emplyee对象，静态域nextId也存在。它属于类，而不属于任何独立的对象。</p><p>举例一些常用的静态常量：<br>1.Math类中的Math.PI<br>2.System类中的System.out</p><h4 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h4><p>静态方法是没有this参数的方法。<br>Employee类的静态方法不能访问Id实例域，因为它不能操作对象。但是，静态方法可以访问自身类中的静态域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getNextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> nextId;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结:使用静态方法的情况<br>1.一个方法不需要访问对象状态，其所需参数都是通过显式参数提供<br>2.一个方法只需要访问类的静态域</p><h2 id="三-方法参数"><a href="#三-方法参数" class="headerlink" title="三.方法参数"></a>三.方法参数</h2><h3 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="(1)基本数据类型"></a>(1)基本数据类型</h3><p>java总是采用按值调用。方法得到的是所有参数值的一个拷贝，特别是，方法不能修改传递给它的任何参数变量的内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> percent = <span class="number">10</span>;</span><br><span class="line">harry.raiseSalary(percent);</span><br></pre></td></tr></table></figure><p>这个方法调用之后，percent的值还是10。</p><h3 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="(2)引用数据类型"></a>(2)引用数据类型</h3><p>一个方法不能修改一个基本数据类型的参数，而对象引用作为参数就不同了，可以很容易地利用下面这个方法实现将一个雇员的薪金提高两倍的操作:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tripleSalary</span><span class="params">(Employee x)</span> </span>&#123;</span><br><span class="line">x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Employee harry = <span class="keyword">new</span> Employee(...);</span><br><span class="line">tripleSalary(harry);</span><br></pre></td></tr></table></figure><p>具体的操作过程:<br>1.x被初始化为harry值的拷贝(harry的值是这个对象的地址)，这里是一个对象的引用<br>2.raiseSalary方法应用于这个对象引用。x和harry同时引用那个Employee对象的薪水提高了200%。<br>3.方法结束后，参数变量x不再使用。当然，对象变量harry继续引用那个薪水增加至3倍的雇员对象。</p><p>总结:<br>1.一个方法不能修改一个基本数据类型。<br>2.一个方法可以改变一个对象参数的状态。<br>3.一个方法不能让一个对象变量引用一个新的对象</p><h2 id="包的作用域"><a href="#包的作用域" class="headerlink" title="包的作用域"></a>包的作用域</h2><p>标记为public的部分可以被任意的类使用;标记为private的部分只能被定义它们的类使用。如果没有指定public 或private,这个部分(类，方法，变量)可以被同意而包中的所有方法访问。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>core java第三章的一些小的注意事项</title>
      <link href="/2019/09/02/core-java%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2019/09/02/core-java%E7%AC%AC%E4%B8%89%E7%AB%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E5%92%8C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1："><a href="#1：" class="headerlink" title="1："></a>1：</h3><p>将一个字符串与一个非字符串的值进行拼接时，后者被转换成字符串<br>案例代码：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">13</span>;</span><br><span class="line">String rating = <span class="string">"abc"</span> + age;</span><br></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2:"></a>2:</h3><p>不能修改Java字符串中的字符，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String line = <span class="string">"abc"</span>;</span><br><span class="line">可以修改字符串变量的引用</span><br></pre></td></tr></table></figure><h3 id="3："><a href="#3：" class="headerlink" title="3："></a>3：</h3><p>可以用equals方法检测两个字符串是否相等<br><em>注意事项</em><br>不要用 <code>==</code>运算符检测两个字符串是否相等，这个运算符只能确定两个字符是否放在同一个位置</p><h3 id="4："><a href="#4：" class="headerlink" title="4："></a>4：</h3><p>字符串常量是共享的，而+或<code>substring</code>等操作产生的结果并不是共享的。<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String greeting = <span class="string">"Hello"</span>;</span><br><span class="line"><span class="keyword">if</span>(greeting == <span class="string">"Hello"</span>) ... <span class="comment">//true</span></span><br><span class="line"><span class="keyword">if</span>(greeting.substring(<span class="number">0</span>,<span class="number">3</span>) == <span class="string">"Hel"</span>)... <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="5"><a href="#5" class="headerlink" title="5:"></a>5:</h3><p>空串””是长度为0的字符串<br>检测是否是空串代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(str.length() == <span class="number">0</span>)</span><br><span class="line">或</span><br><span class="line"><span class="keyword">if</span>(str.equals(<span class="string">""</span>))</span><br></pre></td></tr></table></figure><p>null表示没有任何对象与该变量关联<br><code>String line = null;</code></p><h3 id="6"><a href="#6" class="headerlink" title="6:"></a>6:</h3><p>如果文件名中包含反斜杠符号，就要记得在每个反斜杠之前再加一个额外的反斜杠</p><h3 id="7"><a href="#7" class="headerlink" title="7:"></a>7:</h3><p>不能再嵌套的两个块中声明同名的变量</p><h3 id="8"><a href="#8" class="headerlink" title="8:"></a>8:</h3><p>如果在for语句内部定义一个变量，这个变量就不能在循环体之外使用。<br>因此，如果希望在for循环体之外使用循环计数器的最终值，就确定这个<br>变量在循环语句的前面且在外部声明，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>;vi &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-大数值"><a href="#9-大数值" class="headerlink" title="9:大数值"></a>9:大数值</h3><p><code>BigInteger</code>,<code>BigDecimal</code><br>1.使用静态的valueOf将普通的数值转换为大数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BigInteger a = BigInteger.valueOf(<span class="number">100</span>);</span><br></pre></td></tr></table></figure><p>2.不能使用*，+运算符，需要使用大数值类中的add和multiply方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BigInteger c = a.add(b); <span class="comment">//c = a + b</span></span><br><span class="line">BigInteger d = c.multiply(b.add(BigInteger.valueOf(<span class="number">2</span>)));</span><br><span class="line"><span class="comment">//d = c * (b + 2)</span></span><br></pre></td></tr></table></figure><h3 id="10-数组"><a href="#10-数组" class="headerlink" title="10:数组"></a>10:数组</h3><p>两种编写方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span>[] b = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h3 id="11-Arrays工具类"><a href="#11-Arrays工具类" class="headerlink" title="11:Arrays工具类"></a>11:Arrays工具类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">copyOf:数组拷贝</span><br><span class="line">sort:快速排序</span><br><span class="line">binarySerach:二分查找</span><br></pre></td></tr></table></figure><h3 id="12-不规则数组"><a href="#12-不规则数组" class="headerlink" title="12:不规则数组"></a>12:不规则数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] odds = <span class="keyword">new</span> <span class="keyword">int</span>[MAX+<span class="number">1</span>][];<span class="comment">//分配行</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">0</span>; n &lt;= MAX; n++) &#123;</span><br><span class="line">    odds[n] = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];<span class="comment">//每一行分配不同的列数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo教程二</title>
      <link href="/2019/08/17/hexo%E6%95%99%E7%A8%8B%E4%BA%8C/"/>
      <url>/2019/08/17/hexo%E6%95%99%E7%A8%8B%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<p><strong>这一章的内容就是将博客部署到github上</strong></p><h2 id="一-部署github"><a href="#一-部署github" class="headerlink" title="一.部署github"></a>一.部署github</h2><p>有github的直接登陆即可，没有的注册一下也很简单</p><a id="more"></a><h3 id="1-新建厂库"><a href="#1-新建厂库" class="headerlink" title="1.新建厂库"></a>1.新建厂库</h3><p>例图：<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E4%BA%8C/1.png" alt><br><strong>注意</strong>：仓库命名时一定要是<code>&quot;你的用户名&quot;.github.io</code></p><p>例图：(我这里已经注册这个厂库了，所以会出现红色的标记)<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E4%BA%8C/2.png" alt></p><h3 id="2-部署插件"><a href="#2-部署插件" class="headerlink" title="2.部署插件"></a>2.部署插件</h3><p>代码：<code>cnpm install --save hexo-deployer-git</code></p><p>例图：<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E4%BA%8C/3.png" alt></p><h2 id="二-设置-config-yml文件"><a href="#二-设置-config-yml文件" class="headerlink" title="二.设置-config.yml文件"></a>二.设置-config.yml文件</h2><h3 id="1-用记事本打开文件"><a href="#1-用记事本打开文件" class="headerlink" title="1.用记事本打开文件"></a>1.用记事本打开文件</h3><p>找到如下的代码区域：</p><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E4%BA%8C/4.png" alt><br>按照我的修改内容进行添加修改(repo要改成自己的github仓库的地址，冒号后记得要加上空格)</p><h2 id="三-部署到远端-简单"><a href="#三-部署到远端-简单" class="headerlink" title="三.部署到远端(简单)"></a>三.部署到远端(简单)</h2><h3 id="1-输入hexo-d的命令即可"><a href="#1-输入hexo-d的命令即可" class="headerlink" title="1.输入hexo d的命令即可"></a>1.输入<code>hexo d</code>的命令即可</h3><p>例图：<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E4%BA%8C/5.png" alt></p><h3 id="2-设置github的账号和密码"><a href="#2-设置github的账号和密码" class="headerlink" title="2.设置github的账号和密码"></a>2.设置github的账号和密码</h3><p>按照下图操作即可：<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E4%BA%8C/6.png" alt></p><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E4%BA%8C/7.png" alt></p><h2 id="四-查看自己的博客"><a href="#四-查看自己的博客" class="headerlink" title="四.查看自己的博客"></a>四.查看自己的博客</h2><p>注意：用<code>hexo d</code>命令进行远端部署，直到部署成功就可以浏览自己的个人博客</p><p>浏览地址：就是自己之前在-config.yml文件里配置的repo地址</p><p>参考页面：<a href="https://gaohan666.github.io/" target="_blank" rel="noopener">我的个人博客，点进去逛逛</a></p><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E4%BA%8C/8.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo教程一</title>
      <link href="/2019/08/13/hexo%E6%95%99%E7%A8%8B%E4%B8%80/"/>
      <url>/2019/08/13/hexo%E6%95%99%E7%A8%8B%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p><strong>参考b站的codesheep的视频</strong><br><em>win10版</em></p><a id="more"></a><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h2><p>安装官网: <a href="https://nodejs.org" target="_blank" rel="noopener">点这里</a><br>安装步骤根据默认即可</p><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2.安装git"></a>2.安装git</h2><p>安装官网: <a href="https://git-scm.com/downloads" target="_blank" rel="noopener">node.js</a><br>如果安装的很缓慢的话可以进入淘宝镜像网站：<a href="https://npm.taobao.org/mirrors/git-for-windows/" target="_blank" rel="noopener">点这里</a><br>安装步骤也是默认<br>我下载的版本：Git-2.21.0.rc0.windows.1-64-bit.exe<br>安装完成后可以在开始菜单看到<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/2.png" alt></p><h2 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h2><h3 id="一-创建文件夹"><a href="#一-创建文件夹" class="headerlink" title="(一).创建文件夹"></a>(一).创建文件夹</h3><p>在你的电脑的任意一个盘下创建一个文件夹，这个文件夹是用来储存博客的本地文件的，比如我就在f盘建立了一个blog文件夹，如下：<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/3.png" alt></p><h3 id="二-使用Git-Bash"><a href="#二-使用Git-Bash" class="headerlink" title="(二)使用Git Bash"></a>(二)使用Git Bash</h3><p>在这个空文件夹中右键打开<strong>Git Bash Here</strong>进入如下的界面<img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/4.png" alt></p><p>输入node -v 和 npm -v 看是否出现版本，检测是否安装顺利</p><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/5.png" alt></p><h3 id="三-安装cnpm"><a href="#三-安装cnpm" class="headerlink" title="(三)安装cnpm"></a>(三)安装cnpm</h3><p>输入如下的代码：<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>这玩意主要下载东西快</p><p>安装完输入<strong>cnpm</strong>检测是否安装成功,出现以下内容即为成功<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/6.png" alt></p><h3 id="四-安装hexo"><a href="#四-安装hexo" class="headerlink" title="(四)安装hexo"></a>(四)安装hexo</h3><p>输入代码如下：<br><code>cnpm install -g hexo-cli</code><br>然后再输入<code>hexo -v</code>检测是否安装成功<br>安装成功界面：<br><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/7.png" alt></p><p>接下来输入<code>hexo init</code>初始化这个项目</p><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/8.png" alt></p><h3 id="五-运行测试"><a href="#五-运行测试" class="headerlink" title="(五)运行测试"></a>(五)运行测试</h3><p>这里有三个代码是进行运行测试的关键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>输入<code>hexo g</code></p><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/9.png" alt></p><p>输入<code>hexo s</code></p><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/10.png" alt></p><p>这时可以进入<code>http://localhost:4000</code>查看博客本地化了</p><p>预览图(这是我修改过主题的，官方初始预览和我这不一样)</p><p><img src="https://rong-1257752702.cos.ap-chengdu.myqcloud.com/hexo/hexo%E6%95%99%E7%A8%8B/11.png" alt></p><h2 id="本地内容搭建完成"><a href="#本地内容搭建完成" class="headerlink" title="本地内容搭建完成"></a>本地内容搭建完成</h2><h2 id="接下来的步骤在下一篇"><a href="#接下来的步骤在下一篇" class="headerlink" title="接下来的步骤在下一篇"></a>接下来的步骤在下一篇</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2019/08/11/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8CSDN-markdown%E7%BC%96%E8%BE%91%E5%99%A8/"/>
      <url>/2019/08/11/%E6%AC%A2%E8%BF%8E%E4%BD%BF%E7%94%A8CSDN-markdown%E7%BC%96%E8%BE%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>@<a href="这里写自定义目录标题">TOC</a></p><h1 id="欢迎使用Markdown编辑器"><a href="#欢迎使用Markdown编辑器" class="headerlink" title="欢迎使用Markdown编辑器"></a>欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p><a id="more"></a><h2 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h2><p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法<a href="[mermaid语法说明](https://mermaidjs.github.io/)">^1</a></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd></p><h2 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p><h2 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p>==标记文本==</p><p><del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><p>H<del>2</del>O is是液体。</p><p>2^10^ 运算结果是 1024.</p><h2 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h2><p>链接: <a href="https://mp.csdn.net" target="_blank" rel="noopener">link</a>.</p><p>图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" alt="Alt"></p><p>带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" target="_blank" rel="noopener">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> =30x30)</p><p>居中的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" alt="Alt"></p><p>居中并且带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" target="_blank" rel="noopener">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> =30x30)</p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h2 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/configure" target="_blank" rel="noopener">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An highlighted block</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure><h2 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li><input disabled type="checkbox"> 计划任务</li><li><input checked disabled type="checkbox"> 完成任务</li></ul><h2 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：<br>项目     | Value<br>——– | —–<br>电脑  | $1600<br>手机  | $12<br>导管  | $1</p><h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>| 第一列       | 第二列         | 第三列        |<br>|:———–:| ————-:|:————-|<br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | </p><h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：<br>|    TYPE   |ASCII                          |HTML<br>|—————-|——————————-|—————————–|<br>|Single backticks|<code>&#39;Isn&#39;t this fun?&#39;</code>            |’Isn’t this fun?’            |<br>|Quotes          |<code>&quot;Isn&#39;t this fun?&quot;</code>            |”Isn’t this fun?”            |<br>|Dashes          |<code>-- is en-dash, --- is em-dash</code>|– is en-dash, — is em-dash|</p><h2 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>:  John</dt><dd>Luke</dd></dl><h2 id="如何创建一个注脚"><a href="#如何创建一个注脚" class="headerlink" title="如何创建一个注脚"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<a href="注脚的解释">^2</a></p><h2 id="注释也是必不可少的"><a href="#注释也是必不可少的" class="headerlink" title="注释也是必不可少的"></a>注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p><p>*[HTML]:   超文本标记语言</p><h2 id="KaTeX数学公式"><a href="#KaTeX数学公式" class="headerlink" title="KaTeX数学公式"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener">KaTeX</a>:</p><p>Gamma公式展示 $\Gamma(n) = (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><p>$$<br>\Gamma(z) = \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">here</a>.</p></blockquote><h2 id="新的甘特图功能，丰富你的文章"><a href="#新的甘特图功能，丰富你的文章" class="headerlink" title="新的甘特图功能，丰富你的文章"></a>新的甘特图功能，丰富你的文章</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">这儿</a>,</li></ul><h2 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">Mermaid</a>. 例如下面产生的一个序列图：:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span><br><span class="line">李四--&gt;&gt;王五: 你最近怎么样，王五？</span><br><span class="line">李四--x 张三: 我很好，谢谢!</span><br><span class="line">李四-x 王五: 我很好，谢谢!</span><br><span class="line">Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span><br><span class="line"></span><br><span class="line">李四--&gt;&gt;张三: 打量着王五...</span><br><span class="line">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure><p>这将产生一个流程图。:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class="line">A --&gt; C(圆角长方形)</span><br><span class="line">B --&gt; D&#123;菱形&#125;</span><br><span class="line">C --&gt; D</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">这儿</a>,</li></ul><h2 id="FLowchart流程图"><a href="#FLowchart流程图" class="headerlink" title="FLowchart流程图"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">这儿</a>.</li></ul><h2 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
